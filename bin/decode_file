#!/usr/bin/env ruby

# encode_file -k "key_file_name" -s "source_to_encode" -d "destination_file"

require "openssl"
require "digest"
require "trollop"
require "tempfile"

BLOCKSIZE_TO_READ = 1024 * 1000

opts = Trollop::options do
  opt :key_name, "Encryption Key", :type => :string
  opt :source_to_encode, "File to decrypt", :type => :string
  opt :destination_file, "Destination path for encrypted file."
end

Trollop::die "key_name and source_to_encode required" if !opts[:key_name] || !opts[:source_to_encode]
Trollop::die :key_name, "must exist" unless File.exist?(opts[:key_name]) if opts[:key_name]
Trollop::die :source_to_encode, "must exist" unless File.exist?(opts[:source_to_encode]) if opts[:source_to_encode]

def aes256_decrypt(key, file_path, output_path)
  key = Digest::SHA256.digest(key) if(key.kind_of?(String) && 32 != key.bytesize)
  aes = OpenSSL::Cipher.new('AES-256-CBC')
  aes.decrypt
  aes.key = key
  if output_path.nil?
    File.open(file_path, "rb") do |fi|
      while buffer = fi.read(BLOCKSIZE_TO_READ)
        $stdout.write(aes.update(buffer))
      end
    end
    $stdout.write(aes.final)
  else
    decrypt_file = Tempfile.new("decode")
    File.open(decrypt_file, "wb") do |df|
      File.open(file_path, "rb") do |fi|
        while buffer = fi.read(BLOCKSIZE_TO_READ)
          df.write(aes.update(buffer))
        end
      end
      df.write(aes.final)
    end
    ::FileUtils.mv(decrypted_file.path, output_path)
  end



end

key = (File.read(opts[:key_name])).strip
if opts[:destination_file]
  aes256_decrypt(key, opts[:source_to_encode], opts[:destination_file])
else
  aes256_decrypt(key, opts[:source_to_encode], nil)
end
